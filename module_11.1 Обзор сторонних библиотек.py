import requests

# Запрос данных с сайта
response = requests.get('https://api.github.com')
# Вывод ответа в консоль
print(response.json())  # Печать JSON-ответа от GitHub API
# JSON - текстовый формат обмена данными, который используется для передачи данных между сервером и клиентом
print("\n Код requests завершён \n")

# Функции библиотеки requests:
# Keep-Alive и пул соединений
# Международные домены и URL-адреса
# Сеансы с сохранением файлов cookie
# Проверка TLS/SSL в браузере
# Базовая и дайджест-аутентификация
# Знакомые файлы cookiedict
# Автоматическая распаковка и декодирование контента
# Загрузка файлов из нескольких частей
# Поддержка прокси SOCKS
# Тайм-ауты подключения
# Потоковые загрузки
# Автоматическое чествование .netrc
# Фрагментированные HTTP-запросы


import pandas as pd

# Создание DataFrame из списка словарей
data = [{'name': 'Денис', 'age': 30}, {'name': 'Макс', 'age': 25}]
df = pd.DataFrame(data)

print(df)
print()

# Фильтрация данных по условию
older_than_25 = df[df['age'] > 25]
print(older_than_25)
print()

# Группировка данных по столбцу
grouped_by_age = df.groupby('age')
print(grouped_by_age)
print()

# Сортировка данных по столбцам
sorted_df = df.sort_values(['age'], ascending=False)
print(sorted_df)
print()

# Агрегация данных
total_ages = df['age'].sum()
print(f"Сумма возрастов: {total_ages}")
print("\n Код pandas завершён \n")

#Возможности Pandas:
# Простая работа с отсутствующими данными (представленными как , , или ) как в данных с плавающей запятой, так и без плавающей запятойNaNNANaT
# Изменяемость размера: столбцы могут быть вставлены и удалено из DataFrame и более высоких размеров Объектов
# Автоматическое и явное выравнивание данных: объекты могут быть явно выровнены по набору меток, или пользователь может просто игнорировать надписи и позволить , , и т. д. автоматически Выравнивание данных в вычисленияхSeriesDataFrame
# Мощная, гибкая группировка по функционалу для выполнения Операции разбиение-применение-объединение наборов данных, как для агрегирования, так и для агрегирования и преобразование данных
# Упростите преобразование рваных, по-разному индексированные данные в других структурах данных Python и NumPy в объекты DataFrame
# Интеллектуальная нарезка на основе этикеток, необычная индексация и подмножество Большие наборы данных
# Интуитивно понятное объединение и объединение данных Задает
# Гибкое изменение формы и поворот Наборы данных
# Иерархическая маркировка осей (возможно наличие нескольких меток на тик)
# Надежные инструменты ввода-вывода для загрузки данных из неструктурированных файлов (CSV и с разделителями), файлов Excel, баз данных, и сохранение/загрузка данных из сверхбыстрого формата HDF5
# Функции, специфичные для временных рядов: диапазон дат генерация и преобразование частоты, статистика движущихся окон, Сдвиг и отставание от даты

# import numpy as np
#
# # Массивы:
#
# # Создание одномерного массива целых чисел от 0 до 9
# a = np.arange(10)
# print(a)
# print()
